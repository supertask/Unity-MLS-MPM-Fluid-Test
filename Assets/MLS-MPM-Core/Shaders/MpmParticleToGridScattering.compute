#pragma kernel P2GScattering

//Assets/MLS-MPM-Core/Shaders
#include "MpmStruct.hlsl"
#include "./Constant.hlsl"
#include "./Grid.hlsl"
#include "./SVD.hlsl"

//#define THREAD_1D 256
#define THREAD_1D 64

float _DeltaTime;
uint _NumOfParticles;

// Parameters of hyper elastic material.
float _HyperElasticHardening;
float _HyperElasticMu;
float _HyperElasticLambda;

RWStructuredBuffer<MpmParticle> _ParticlesBufferRead;
RWStructuredBuffer<MpmCell> _GridBuffer;
RWStructuredBuffer<LockMpmCell> _LockGridBuffer;

[numthreads(THREAD_1D,1,1)]
void P2GScattering(uint3 DTid : SV_DispatchThreadID)
{
    const uint particleId = DTid.x;
	//if (particleId > _NumOfParticles) return;

	MpmParticle particle = _ParticlesBufferRead[particleId];
	if (particle.type == TYPE__INACTIVE) return;

	float3x3 F = particle.Fe;
	float3x3 R = 0;
	float3x3 U ;
	float3 d;
	float3x3 V;

	float volume = particle.volume;
	float3x3 Dinv = InvApicD();
	
	GetSVD3D(F, U, d, V);
	R = mul(U, transpose(V));

	float e = 1;
	float mu = _HyperElasticMu;
	float lambda = _HyperElasticLambda;

	float j = determinant(F);
	if(particle.type == TYPE__SNOW)
	{
		e = exp(_HyperElasticHardening * (1 - particle.Jp));
	}
	// else
	// if(particle.type == TYPE__FLUID)
	// {
	// 	mu = 0;
	// 	j = particle.Jp;
	// }

	float mup = mu * e;
	float lambdap = lambda * e;
	float3x3 P = mul((2 * mup * (F - R)), transpose(F)) + lambdap * (j - 1) * j ;

	if(particle.type == TYPE__FLUID)
	{
		float s = particle.Jp -1;
		P = float3x3(s,0,0,0,s,0,0,0,s) * mu * 10;
	}
	float3x3 stress = -(_DeltaTime * volume) * mul(Dinv , P);
	float3x3 apic = stress + particle.mass * particle.C;

	// j = clamp(j, 0.6f,20.0f);
	// float3x3 FinvT = transpose(inverse(F));
	// float3x3 P = (2.0f * mup * (F - R)) + lambdap * (j - 1.0f) * j * FinvT;
	// float3x3 stress = 1.0f / j * mul(P, transpose(F));

	int3 centerCellIndex3D = ParticlePositionToCellIndex3D(particle.position);

	for (int gx = -1; gx <= 1; ++gx)
	{
		for (int gy = -1; gy <= 1; ++gy)
		{
			for(int gz = -1; gz <=1; ++gz)
			{
				int3 cellIndex3D = centerCellIndex3D + int3(gx,gy,gz);
				uint cellIndex = CellIndex3DTo1D(cellIndex3D);

				if (InGrid(cellIndex3D))
				{
					float3 gridPositionWS = CellIndex3DToPositionWS(cellIndex3D);
					float weight = GetWeight(particle.position, int3(gx,gy,gz));

					//ここでロックする
					float mass = weight * particle.mass;
					float3 mass_x_velocity = weight * (particle.mass * particle.velocity
						+ mul(apic, (gridPositionWS - particle.position)));
					//int2 splitMass = ConvertFloatToInt2(mass);
					//int2 splitMassXVelocityX = ConvertFloatToInt2(mass_x_velocity.x);
					//int2 splitMassXVelocityY = ConvertFloatToInt2(mass_x_velocity.y);
					//int2 splitMassXVelocityZ = ConvertFloatToInt2(mass_x_velocity.z);

					//Add Mass
					InterlockedAdd(_LockGridBuffer[cellIndex].mass, (int)(mass * FLOAT_TO_INT_DIGIT_1) );

					//InterlockedAdd(_LockGridBuffer[cellIndex].mass, splitMass.x);
					//InterlockedAdd(_LockGridBuffer[cellIndex].mass2, splitMass.y);

					//Add Mass x velocity
					InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity.x, (int)(mass_x_velocity.x * FLOAT_TO_INT_DIGIT_1) );
					InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity.y, (int)(mass_x_velocity.y * FLOAT_TO_INT_DIGIT_1) );
					InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity.z, (int)(mass_x_velocity.z * FLOAT_TO_INT_DIGIT_1) );

					//InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity.x, splitMassXVelocityX.x );
					//InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity2.x, splitMassXVelocityX.y );
					//InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity.y, splitMassXVelocityY.x );
					//InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity2.y, splitMassXVelocityY.y );
					//InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity.z, splitMassXVelocityZ.x );
					//InterlockedAdd(_LockGridBuffer[cellIndex].mass_x_velocity2.z, splitMassXVelocityZ.y );


					//_LockGridBuffer[cellIndex].mass += (int)(mass * FLOAT_TO_INT_DIGIT_1);
					//_LockGridBuffer[cellIndex].mass_x_velocity.x += (int)(mass_x_velocity.x * FLOAT_TO_INT_DIGIT_1);
					//_LockGridBuffer[cellIndex].mass_x_velocity.y += (int)(mass_x_velocity.y * FLOAT_TO_INT_DIGIT_1);
					//_LockGridBuffer[cellIndex].mass_x_velocity.z += (int)(mass_x_velocity.z * FLOAT_TO_INT_DIGIT_1);
				}
			}
		}
	}

}
