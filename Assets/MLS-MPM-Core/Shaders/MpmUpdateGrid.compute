#pragma kernel UpdateGrid

#include "./MpmStruct.hlsl"
#include "./Constant.hlsl"
#include "./Grid.hlsl"
#include "./SVD.hlsl"

//#define THREAD_1D 256
#define THREAD_1D 1024

float _DeltaTime;

RWStructuredBuffer<LockMpmCell> _LockGridBuffer;
RWStructuredBuffer<MpmCell> _GridBuffer;
//#if defined(LScattering) || defined(LFScattering)
//#else
//#endif

//RWStructuredBuffer<LockMpmCell> _GridBuffer;

[numthreads(THREAD_1D,1,1)]
void UpdateGrid(uint3 DTid : SV_DispatchThreadID)
{
	const uint idx = DTid.x;

    #if defined(LScattering) || defined(LFScattering)
        LockMpmCell cell = _LockGridBuffer[idx];
    #else
        MpmCell cell = _GridBuffer[idx];
    #endif
    //LockMpmCell cell = _GridBuffer[idx];

	uint3 cidx = CellIndex1DTo3D(idx);

    #if defined(LScattering)
        //float mass = ConvertInt2ToFloat(int2(cell.mass, cell.mass2));
        //float3 mass_x_velocity = ConvertInt3x2ToFloat3(cell.mass_x_velocity, cell.mass_x_velocity2);
        float mass = ((float)cell.mass) * INT_TO_FLOAT_DIGIT_1;
        float3 mass_x_velocity = ((float3)cell.mass_x_velocity) * INT_TO_FLOAT_DIGIT_1;
    #elif defined(LFScattering)
        //float mass = ((float)cell.mass) / FLOAT_TO_INT_DIGIT_1;
        //float3 mass_x_velocity = ((float3)cell.mass_x_velocity) / FLOAT_TO_INT_DIGIT_1;
        float mass = ((float)cell.mass) * INT_TO_FLOAT_DIGIT_1;
        float3 mass_x_velocity = ((float3)cell.mass_x_velocity) * INT_TO_FLOAT_DIGIT_1;
    #else
        float mass = cell.mass;
        float3 mass_x_velocity = cell.mass_x_velocity;
    #endif
    //float mass = cell.mass;
    //float3 mass_x_velocity = cell.mass_x_velocity;

    if (mass <= 0)
    {
        cell.mass = 0;
        cell.mass2 =0;
        cell.mass_x_velocity = int3(0,0,0);
        cell.mass_x_velocity2 = int3(0,0,0);
        cell.velocity = float3(0,0,0);
        cell.force = float3(0,0,0);
    }
    else
    {
        //float mass = cell.mass * INT_TO_FLOAT_DIGIT_1;
        //float3 mass_x_velocity = cell.mass_x_velocity * INT_TO_FLOAT_DIGIT_1;

        cell.velocity = mass_x_velocity / mass;
        //cell.velocity = float3(0,-1,0);

        float3 g = float3(0.0f,-9.8f, 0.0f);
        cell.velocity += _DeltaTime * (cell.force / mass + g);
        if (cidx.x < 2 || cidx.x >= _GridResolutionWidth - 2) cell.velocity.x = 0;
        if (cidx.y < 2 || cidx.y >= _GridResolutionHeight - 2) cell.velocity.y = 0;
        if (cidx.z < 2 || cidx.z >= _GridResolutionDepth - 2) cell.velocity.z = 0;
    }

    #if defined(LScattering) || defined(LFScattering)
        _LockGridBuffer[idx] = cell;
    #else
        _GridBuffer[idx] = cell;
    #endif
}
